# SPDL Obq_SurfaceEnvironment - Created by Marc-Antoine Desjardins - ObliqueFX - marcantoinedesjardins@gmail.com : Licensed under the MIT license: http://www.opensource.org/licenses/mit-license.php
SPDL
Version = "2.0.0.0";
Reference = "{E5B5BCBE-E3E4-4556-809D-5106E122E092}";
PropertySet "Obq_SurfaceEnvironment_params"
{
	Parameter "out" output
	{
		GUID = "{DA9FA386-2C32-4D89-9FE4-2D89989FE6C5}";
		Type = color;
	}
	Parameter "tex" input
	{
		GUID = "{4735EE1A-D33C-4CDD-913E-4FBEC49EFAB9}";
		Type = texture;
		Texturable = on;
	}
	Parameter "considerAlpha" input
	{
		GUID = "{BA8B6E50-3550-4D17-BAB7-E376810CA5BC}";
		Type = boolean;
		Value = Off;
		Texturable = On;
	}
	Parameter "mapMode" input
	{
		GUID = "{CA42B5FD-EB13-4E58-AE99-B32E7C80F65D}";
		Type = string;
		Texturable = Off;
		Value = "Latitude-Longitude";
	}
	Parameter "usePassEnvShader" input
	{
		GUID = "{3F5F0629-2A55-4FE9-A041-0AAD53B2F167}";
		Type = boolean;
		Texturable = On;
		Value = Off;
	}
	Parameter "rayTypeEnv" input
	{
		GUID = "{EEE2244D-881A-461B-83F1-D25A75ED2DBD}";
		Type = string;
		Texturable = Off;
		Value = "Reflected";
	}
	Parameter "useIntensityEnv" input
	{
		GUID = "{D33590AC-F8DE-4231-934B-ED2F84088563}";
		Type = boolean;
		Texturable = On;
		Value = On;
	}
	Parameter "useTransformsEnv" input
	{
		GUID = "{5AE1457A-5FE6-4212-B7EE-60A3D531870B}";
		Type = boolean;
		Texturable = On;
		Value = On;
	}
	Parameter "useRoughnessEnv" input
	{
		GUID = "{459BC50B-5960-4ECE-9E85-AC5DF35EE77B}";
		Type = boolean;
		Texturable = On;
		Value = On;
	}
	Parameter "sampleLevel" input
	{
		GUID = "{CE7C1D2E-2E87-49DD-B68E-C48020F08DF4}";
		Type = integer;
		Texturable = off;
		Value = 1;
		Value Minimum = 1;
	}
	Parameter "coneAngle" input
	{
		GUID = "{5F487C20-452C-4B1A-8084-AEA450E9586C}";
		Type = scalar;
		Texturable = On;
		Value = 12.0;
		Value Minimum = 0.0;
		Value Maximum = 180.0;
	}
	Parameter "cosLobeGloss" input
	{
		GUID = "{FB34DD76-D1A9-4CC7-952E-0D81730FE849}";
		Type = scalar;
		Texturable = On;
		Value = 0.0;
		Value Minimum = 0.0;
		Value Maximum = 1.0;
	}
	Parameter "useSampleCount" input
	{
		GUID = "{CB4C3D52-8CDD-4344-BB8F-9793FA422683}";
		Type = boolean;
		Value = Off;
		Texturable = On;
	}
	Parameter "sampleCount" input
	{
		GUID = "{82B0A8F9-9175-4E50-825E-61BA6FD90FC2}";
		Type = scalar;
		Texturable = On;
		Value = 10.0;
		Value Minimum = 0.0;
	}
	Parameter "sampleCountMultiplier" input
	{
		GUID = "{961B344E-D5DB-4696-8770-5B722EBF760D}";
		Type = scalar;
		Texturable = On;
		Value = 1.0;
		Value Minimum = 0.0;
	}
	Parameter "onSurfaceMode" input
	{
		GUID = "{90B16A43-B82A-49A6-8AB3-07236243E97A}";
		Type = string;
		Texturable = Off;
		Value = "Reflection Direction";
	}
	Parameter "ior" input
	{
		GUID = "{739B5EF6-2B48-47E5-A2CA-2AD9E71335B4}";
		Type = scalar;
		Texturable = on;
		Value = 1;
		Value Minimum = 0;
	}
	Parameter "customDirection" input
	{
		GUID = "{57481894-C60D-4DF1-B14C-77793728F038}";
		Type = vector;
		Texturable = on;
		Value = 0.0 1.0 0.0;
	}
	Parameter "intensity" input
	{
		GUID = "{C88F7381-018D-429A-8D6F-4AA9DD8346F9}";
		Type = scalar;
		Texturable = on;
		Value = 1;
		Value Minimum = 0;
	}
	Parameter "globalRotation" input
	{
		GUID = "{2F2839FB-A414-4DC7-8F0F-6634C562CEEC}";
		Type = boolean;
		Value = on;
		Texturable = Off;
	}
	Parameter "rotation" input
	{
		GUID = "{65842291-1040-46E4-8940-79827D0366B9}";
		Type = vector;
		Value = 0.0 0.0 0.0;
		Texturable = On;
	}
	Parameter "passthrough" input
	{
		GUID = "{D416AB48-F1CD-4FA3-94A7-C5A3B98F4680}";
		Type = boolean;
		Value = off;
		Texturable = On;
	}
	Parameter "passthroughShader" input
	{
		GUID = "{DF9D277E-A717-4C03-8E35-ECB790A47C53}";
		Type = color;
		Value = 0.0 0.0 0.0 1.0;
		Texturable = On;
	}
	Parameter "renderChannel" input
   {
      GUID = "{2298F6CB-775D-4896-ABA1-58F8A18E826A}";
      Type = string;
   }
     Parameter "flipU" input
	{
		GUID = "{995A3351-FEBB-453C-ADFB-5B6349591FEC}";
		Type = boolean;
		Value = off;
		Texturable = On;
	}
	Parameter "flipV" input
	{
		GUID = "{C0A3C278-8F41-494C-BF7E-A3695C3D5E39}";
		Type = boolean;
		Value = off;
		Texturable = On;
	}
}

phenomenon "Obq_SurfaceEnvironment_declare"
{
	Name = "Obq_SurfaceEnvironment";
	Version = 1;
	Use = material;
}

Defaults
{
	tex
	{
		Name = "Image";
		Commands = "{F5C75F11-2F05-11d3-AA95-00AA0068D2C0}";
		UIType = "ImageBrowserItem.ImageBrowserItem.1";
	}
	considerAlpha
	{
		Name = "Use Alpha";
		Commands = "{F5C75F11-2F05-11D3-AA95-00AA0068D2C0}";
	}
	mapMode
	{
		Name = "Mapping Mode";
		Commands = "{F5C75F11-2F05-11d3-AA95-00AA0068D2C0}";
		UIType = "Combo";
		Items
		{
			"Mirrored Ball" = "Mirrored Ball",
			"Angular Map" = "Angular Map",
			"Latitude-Longitude" = "Latitude-Longitude",
			"Vertical Cross" = "Vertical Cross",
		}
	}
	usePassEnvShader
	{
		Name = "Use The Pass Environment Shader";
		Commands = "{F5C75F11-2F05-11D3-AA95-00AA0068D2C0}";
	}
	rayTypeEnv
	{
		Name = "Ray Type";
		Commands = "{F5C75F11-2F05-11d3-AA95-00AA0068D2C0}";
		UIType = "Combo";
		Items
		{
			"Camera" = "Camera",
			"Diffuse (GI)" = "Diffuse (GI)",
			"Reflected" = "Reflected",
			"Glossy" = "Glossy",
			"Refracted" = "Refracted",
		}
	}
	useIntensityEnv
	{
		Name = "Scale With This Intensity Too";
		Commands = "{F5C75F11-2F05-11D3-AA95-00AA0068D2C0}";
	}
	useTransformsEnv
	{
		Name = "Use These Transforms Too";
		Commands = "{F5C75F11-2F05-11D3-AA95-00AA0068D2C0}";
	}
	useRoughnessEnv
	{
		Name = "Use This Roughness Too";
		Commands = "{F5C75F11-2F05-11D3-AA95-00AA0068D2C0}";
	}
	sampleLevel
	{
		Name = "Sample Level";
		UIRange = 1 To 10;
		Commands = "{F5C75F11-2F05-11D3-AA95-00AA0068D2C0}";
	}
	coneAngle
	{
		Name = "Cone Angle";
		Commands = "{F5C75F11-2F05-11D3-AA95-00AA0068D2C0}";
	}
	cosLobeGloss
	{
		Name = "Cos Lobe Gloss";
		Commands = "{F5C75F11-2F05-11D3-AA95-00AA0068D2C0}";
	}
	useSampleCount
	{
		Name = "Clamp Sample Count";
		Commands = "{F5C75F11-2F05-11D3-AA95-00AA0068D2C0}";
	}
	sampleCount
	{
		Name = "Max Sample Count";
		UIRange = 1 To 10;
		Commands = "{F5C75F11-2F05-11D3-AA95-00AA0068D2C0}";
	}
	sampleCountMultiplier
	{
		Name = "Max Sample Count Multiplier";
		UIRange = 1 To 256;
		Commands = "{F5C75F11-2F05-11D3-AA95-00AA0068D2C0}";
	}
	onSurfaceMode
	{
		Name = "Direction";
		Commands = "{F5C75F11-2F05-11d3-AA95-00AA0068D2C0}";
		UIType = "Combo";
		Items
		{
			"View Direction" = "View Direction",
			"View Direction (Inverted)"= "View Direction (Inverted)",
			"Surface Normal Direction" = "Surface Normal Direction",
			"Surface Normal Direction (no bump)" = "Surface Normal Direction (no bump)",
			"Surface Normal Direction (Inverted)" = "Surface Normal Direction (Inverted)",
			"Surface Normal Direction (no bump, Inverted)" = "Surface Normal Direction (no bump, Inverted)",
			"Surface Normal Direction (Front-Facing)" = "Surface Normal Direction (Front-Facing)",
			"Surface Normal Direction (Back-Facing)" = "Surface Normal Direction (Back-Facing)",
			"Reflection Direction" = "Reflection Direction",
			"Reflection Direction (no bump)" = "Reflection Direction (no bump)",
			"Refraction Direction" = "Refraction Direction",
			"Refraction Direction (no bump)" = "Refraction Direction (no bump)",
			"Custom Direction" = "Custom Direction",
		}
	}
	ior
	{
		Name = "IOR";
		Commands = "{F5C75F11-2F05-11d3-AA95-00AA0068D2C0}";
		UIRange = 0 To 5;
	}
	customDirection
	{
		Name = "Custom Direction";
		Commands = "{F5C75F11-2F05-11D3-AA95-00AA0068D2C0}";
		UIRange = -1 To 1;
	}
	intensity
	{
		Name = "Intensity";
		Commands = "{F5C75F11-2F05-11d3-AA95-00AA0068D2C0}";
		UIRange = 0 To 2;
	}
	globalRotation
	{
		Name = "Use rotation at a global scope";
		Commands = "{F5C75F11-2F05-11d3-AA95-00AA0068D2C0}";
	}
	rotation
	{
		Name = "Rotation";
		Commands = "{F5C75F11-2F05-11d3-AA95-00AA0068D2C0}";
		UIRange =  -180.0 to 180.0;
	}
	passthrough
	{
		Name = "Passthrough -> Result only in AOV";
		Commands = "{F5C75F11-2F05-11d3-AA95-00AA0068D2C0}";
	}
	passthroughShader
	{
		Name = "Passthrough Shader";
		UIType = "rgba";
		Commands = "{F5C75F11-2F05-11D3-AA95-00AA0068D2C0}";
	}
	renderChannel
	{
      Name = "Render Channel";
      UIType = "combo";
	}
	flipU
	{
		Name = "Flip U";
		Commands = "{F5C75F11-2F05-11d3-AA95-00AA0068D2C0}";
	}
	flipV
	{
		Name = "Flip V";
		Commands = "{F5C75F11-2F05-11d3-AA95-00AA0068D2C0}";
	}
}

Layout "Default"
{
	Tab "Texture"
	{
		Group "Pass Environment Shader"
		{
			usePassEnvShader;
			rayTypeEnv;
			#useIntensityEnv;
			#useTransformsEnv;
			#useRoughnessEnv;
		}
		Group "Image"
		{
			tex;
			considerAlpha;
			mapMode;
			flipU;
			flipV;
		}
		Group "Ray Options"
		{
			onSurfaceMode;
			ior;
#			customDirection;
		}
		Group "Intensity"
		{
			intensity;
		}
	}
	Tab "Roughness"
	{
		Group "Multiple Ray Cast"
		{
			sampleLevel;
			coneAngle;
			cosLobeGloss;
			useSampleCount;
			sampleCount;
			sampleCountMultiplier;
		}
	}
	Tab "Transformations"
	{
		Group "Transformations"
		{
			globalRotation;
			rotation;
		}
	}
	Tab "Render Channel"
	{
		Group "AOV"
		{
			passthrough;
			Row 
			{
				renderChannel, nolabel;
				Button AddRenderChannel,alignright = "Add...";
			}
		}
	}
}


Layout "RenderTree"
{
	Group "Pass Environment Shader"
	{
		usePassEnvShader;
		rayTypeEnv;
		#useIntensityEnv;
		#useTransformsEnv;
		#useRoughnessEnv;
	}
	Group "Image"
	{
		tex;
		considerAlpha;
		mapMode;
		flipU;
		flipV;
	}
	Group "Ray Options"
	{
		onSurfaceMode;
		ior;
		customDirection;
	}
	Group "Intensity"
	{
		intensity;
	}
	Group "Multiple Ray Cast"
	{
		sampleLevel;
		coneAngle;
		cosLobeGloss;
		useSampleCount;
		sampleCount;
		sampleCountMultiplier;
	}
	Group "Transformations"
	{
		globalRotation;
		rotation;
	}
	Group "Render Channel"
	{
		passthrough;
		passthroughShader;
	}
}

Language = "VBScript";
Logic
{

	Sub usePassEnvShader_OnChanged()
		IF PPG.usePassEnvShader.Value = True Then
			PPG.rayTypeEnv.Show(True)
			'PPG.useIntensityEnv.Show(True)
			'PPG.useTransformsEnv.Show(True)
			'PPG.useRoughnessEnv.Show(True)
			PPG.tex.Show(False)
			PPG.considerAlpha.Show(False)
			PPG.mapMode.Show(False)
		Else
			PPG.rayTypeEnv.Show(False)
			'PPG.useIntensityEnv.Show(False)
			'PPG.useTransformsEnv.Show(False)
			'PPG.useRoughnessEnv.Show(False)
			PPG.tex.Show(True)
			PPG.considerAlpha.Show(True)
			PPG.mapMode.Show(True)
		End If
	End Sub

	Sub useSampleCount_OnChanged()
		IF PPG.useSampleCount.Value = True Then
			PPG.sampleCount.Enable(True)
			PPG.sampleCountMultiplier.Enable(True)
		Else
			PPG.sampleCount.Enable(False)
			PPG.sampleCountMultiplier.Enable(False)
		End If
	End Sub

	Sub sampleLevel_OnChanged()
		If PPG.sampleLevel.Value = 1 Then
			PPG.coneAngle.Enable(False)
			PPG.cosLobeGloss.Enable(False)
			PPG.useSampleCount.Enable(False)
			PPG.sampleCount.Enable(False)
			PPG.sampleCountMultiplier.Enable(False)
		Else
			PPG.coneAngle.Enable(True)
			PPG.cosLobeGloss.Enable(True)
			PPG.useSampleCount.Enable(True)
			PPG.sampleCount.Enable(True)
			PPG.sampleCountMultiplier.Enable(True)
			useSampleCount_OnChanged()
		End If
	End Sub

	Sub onSurfaceMode_OnChanged()
		If PPG.onSurfaceMode.Value = "Refraction Direction" Or PPG.onSurfaceMode.Value = "Refraction Direction (no bump)" Then
			PPG.ior.Show(True)
		Else
			PPG.ior.Show(False)
		End If
	End Sub

	Sub AddRenderChannel_OnClicked
		Dim		sName

		sName = InputBox( XSIUtils.Translate( "Render Channel Name", "XSISPDLFILE" ) )
		If sName = "" Then Exit Sub

		On Error Resume Next
		sName = CreateRenderChannel( sName, siRenderChannelColorType )
		If Err.Number <> 0 Then
			LogMessage "Unable to create channel. Does a channel with that name already exist?"
			Exit Sub
		End If
		If sName <> "" Then
			For Each oInspected In PPG.Inspected
				oInspected.channel = sName
			Next
			OnInit
		End If
	End Sub

	Sub OnInit
		PPG.PPGLayout.SetAttribute "HelpFile","http://s3aws.obliquefx.com/public/shaders/help_files/Obq_SurfaceEnvironment.html"
		onSurfaceMode_OnChanged()
		sampleLevel_OnChanged()
		useSampleCount_OnChanged()
		usePassEnvShader_OnChanged()
		PPG.useIntensityEnv.Value = True
		PPG.useTransformsEnv.Value = True
		PPG.useRoughnessEnv.Value = True

		Dim oRenderChannels
		Set oRenderChannels = ActiveProject.ActiveScene.PassContainer.Properties( "Scene Render Options" ).RenderChannels
		
		If TypeName(oRenderChannels) = "Nothing" Then
			LogMessage "Scene Render Options property not found. Can't enumerate render channels.", siError
			Exit Sub
		End If
		If oRenderChannels.Count = 0 Then
			LogMessage "No render channels defined.", siError
			Exit Sub
		End If
		
		Dim		idx
		ReDim oChannelList( oRenderChannels.Count * 2 + 3 )

		idx = 0
		for each oChannel in oRenderChannels
			If oChannel.ChannelType = siRenderChannelColorType And oChannel.UserDefined Then
				oChannelList( idx * 2 + 2 ) = oChannel.Name
				oChannelList( idx * 2 + 3 ) = oChannel.Name
				idx = idx + 1
			End If
		next 
		
		ReDim Preserve oChannelList( idx * 2 + 1 )

		Dim oChannelCombo
		Set oChannelCombo = PPG.PPGLayout.Item( "renderChannel" )
		oChannelCombo.UIItems = oChannelList
		
		PPG.Refresh
	End Sub

}