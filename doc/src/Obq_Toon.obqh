%shadername :: Obq_Toon

%class :: Material

%output :: Color RGB

%synopsisStart

%pp :: A toon shader with a lot of options. A dot product for each component (diffuse = NdotL, highlight = NdotH and rimlight = NdotV) is calculated to determine the shading and then remapped according to some rules. You can, for example, remap the shading with a gradient node or a gradient in an image. This way, you can create specific toon looks and funky highlights.
%image :: images/Obq_Toon_01.jpg :: Synopsis image :: 512
%idesc :: A simple toon example.

%synopsisEnd

%usageStart

%pp :: For a classic toon look, use it exactly like the Mental Ray toon shader with the coverage and softness parameters. If you want to remap using a gradient, you must use the <em>Gradient</em> node from the <em>Mixers - Processing</em> group and use an <em>Obq_MessageFlt</em> node with <em>Obq_Toon</em> preset as <em>input</em>. The port is only accessible via the render tree.
%image :: images/Obq_Toon_02.jpg :: Usage :: 512
%idesc :: Obq_Toon using a gradient to remap diffuse and an image to remap highlight.
%note :: Alpha values of images and gradients are not used, you should fade to back towards U=0.

#%usageEnd

%section :: Globals

%param :: Ambient Color <em>[ambient_color]</em>
%pp :: This is a simple constant.


%param :: Ambient Scale <em>[ambient_scale]</em>
%pp :: Let's you adjust the Ambient mix.


%param :: Multiply by scene ambience <em>[ambient_multAmbience]</em>
%pp :: When checked, this multiplies the ambient color by the scene ambience.


%param :: No Internal Ambient <em>[ambient_noInternal]</em>
%pp :: With a non-opaque object, check this to disable the ambient contribution of back-facing polygons. See <em>opacity</em> for example.


%param :: Opacity Color <em>[opacity]</em>
%pp :: This is the opacity of the shader.
%note :: Use the <em>No Internal</em> component parameters to activate or deactivate contribution of back-facing polygons.
%image :: images/Obq_Toon_07.jpg :: Opacity and no internal :: 512
%idesc :: Left is an opaque sphere, in the middle a semi-opaque sphere and right, semi-opaque sphere with all <em>_noInternal</em> checked.



%param :: Compositing <em>[global_compMode]</em>
%pp :: This tells the shader how to composite ambient, diffuse, highlight and rimlight results together in that order.
%tableStart
%tableItem :: 40 :: Add :: this will add all the results.
%tableItem :: 40 :: Over :: this will mix the results one by one using the rule : out = A + (1-A.alpha)*out, where A.alpha is the channel with the greatest value.
%tableItem :: 40 :: Max :: for each channel, the greatest value of the components will be used.
%tableItem :: 40 :: Screen :: for each channel, out = A + out - A*out for values of A and out [0,1], else the greatest value between the two.
%tableEnd
%image :: images/Obq_Toon_05.jpg :: global_compMode :: 512
%idesc :: A sphere with grey diffuse, reddish highlight and bluish rimlight. From left to right: <em>Add</em>, <em>Over</em>, <em>Max</em> and <em>Screen</em> mode. There is no apparent highlight on the third sphere because the red channel of the diffuse is higher than the red channel of the highlight.


%param :: Loop Mode <em>[global_loopMode]</em>
%pp :: This allows the user to evaluate the shading+remap either at each light samples or after all the lights were sampled. This is useful to change the look of multiple lights setups.
%tableStart
%tableItem :: 105 :: Add all values :: this is what you would expect normally, the shading+remap is calculated for each light sample and then added.
%tableItem :: 105 :: Use sum for value :: The sum of the samples will be use to calculate shading+remap.
%tableItem :: 105 :: Use max for value :: The single greatest value of the samples will be use to calculate shading+remap.
%tableItem :: 105 :: Remap value :: This is a little bit like the second option; shading is calculated at each sample, but remapped only at the end.
%tableItem :: 105 :: Remap inputs :: This is like <em>Remap value</em> but instead of using built-in shading, it uses the <em>_shaderInput</em> port as value. Only diffuse and highlight ports are available.
%tableEnd
%image :: images/Obq_Toon_06.jpg :: global_loopMode :: 512
%idesc :: Sphere and ground lit by 3 lights of intensities 0.5, 0.75 and 1. From left to right : <em>Add all values</em>, <em>Use sum for value</em>, <em>Use max for value</em> and <em>Remap value</em>. From top to bottom, Global Loop Light Mode : <em>Add</em>, <em>Add (Clamped)</em>, <em>Maximum</em> and <em>Multiply</em>.
#%image :: images/Obq_Toon_09.jpg :: Remap Inputs :: 256
#%idesc :: A somewhat toonish gradient remap inputs for a standard shader.
%notes :: When using <em>Remap inputs</em>, remap parameters <em>Coverage</em>, <em>Softness</em> and <em>Exponent</em> are still activated, so you should have them equal 1.


%param :: Lights <em>[global_loopLightMode]</em>
%pp :: Enabled when using options 2 or 3 from the previous parameter. This tells the shader what to do with the light samples.
%tableStart
%tableItem :: 90 :: Add :: add all the light samples.
%tableItem :: 90 :: Add (Clamped):: add all the light samples but clamp to one.
%tableItem :: 90 :: Maximum :: use the single greatest light sample.
%tableItem :: 90 :: Multiply :: multiply them all together.
%tableEnd

%param :: Remap <em>[global_remapMode]</em>
%pp :: Enabled when using one of the two remap loop modes. This tells the shader what to do with the input shaders.
%tableStart
%tableItem :: 110 :: Use Average :: use the average RGB intensities of the input as dot.
%tableItem :: 110 :: Use Luminance :: use the luminance of the input as dot using the equation : <br>Luminance = 0.2126*R + 0.7152*G + 0.0722*B.
%tableItem :: 110 :: Use Each Channel :: calculates the dot for each channel and remaps them.
%tableEnd
%note :: Only diffuse and highlight ports are available and evaluation is done only if a shader is plugged into the port as optimization.

%image :: images/Obq_Toon_10.jpg :: Remap Inputs :: 512
%idesc :: From left to right : input standard, <em>Use Average</em>, <em>Use Luminance</em> and <em>Use Each Channel</em>. From top to buttom, multiplied by normalized input color : unchecked and checked. 


%param :: Multiply by Normalized Input Color <em>[global_remapMultByColor]</em>
%pp :: When checked, this multiplies the result by the HSV color of the input using V=1.
%note :: This is only enabled with the two remap loop modes in <em>Use Average</em> or <em>Use Luminance</em> remap modes.


%param :: Multiply by Light Color <em>[global_multByLightColor]</em>
%pp :: When checked, this multiplies all light samples by the light color.
%note ::  In theory, this should always be checked. If it's off, you wont have any shadows.

%param :: Clamp Before Compositing <em>[global_clamp]</em>
%pp :: When checked, this clamps the values of the accumulated results before compositing a new component.
%note ::  This helps solidify colors.

%param :: Check To Render Map Image (Use diffuse) <em>[output_imageOnUV]</em>
%pp :: With this checked, you can render map the gradient or the remapped image of the <em>Diffuse</em> tab. Simply create a grid, assign the material of the object with the desired gradient, for example, add planar XZ texture projection, enable this option and do a render map using Kettle Bake.
%note :: Once this is done, you should add 2 pixels to the left of the image with the same value as the previously first pixel and do the same to the right with the last pixel.

%section :: Diffuse/Highlight/Rimlight
%pp :: The diffuse component uses the N dot L of the Lambertian model, the highlight component uses the N dot H of the Blinn-Phong model and the rimlight uses the N dot V to to determine shading. Once this shading is calculated, it is remapped with respect to the <em>Mode</em>.

%param :: Color <em>[_color]</em>
%pp :: This is the color of the diffuse component.

%param :: Scale <em>[_scale]</em>
%pp :: This is the scale of the diffuse component.

%param :: Exponent <em>[highlight_exponent]</em>
%pp :: The bigger the exponent, the smaller the highlight.

%param :: Coverage <em>[_coverage]</em>
%pp :: This will somewhat scale down the span of the lit portion of the object.
%image :: images/Obq_Toon_03.jpg :: Coverage :: 512
%idesc :: Different values of <em>Coverage</em> = {1.0, 0.5, 0.25, 0.0}.
%note :: dot = 1-(1-dot)/coverage

%param :: Softness <em>[_softness]</em>
%pp :: This will somewhat push highest values down. Use a value of 0 for a classic toon look.
%image :: images/Obq_Toon_04.jpg :: Softness :: 512
%idesc :: Different values of <em>Softness</em> = {1.0, 0.5, 0.25, 0.0}.
%note :: dot = dot/softness. When used for highlight, if you put 0 here you should use a <em>Coverage of less than 1,</em>

%param :: No Internal <em>[_noInternal]</em>
%pp :: This will deactivate contribution of back-facing polygons.

%param :: Linearize Dot Product <em>[_linearDot]</em>
%pp :: This will linearize the resulting dot product :  dot= 1-acos(dot)/(pi/2).
%image :: images/Obq_Toon_08.jpg :: Softness :: 512
%idesc :: Left is not linearized, while right is. The stripes on the right image all have a similar thickness instead of being blown in the green and crunched in the red.

%param :: Mode <em>[_mode]</em>
%pp :: This will tell how to remap the dot product. <em>Coverage</em> and <em>Softness</em> are used on all of the modes.
%tableStart
%tableItem :: 50 :: Parameters :: Remap is done according to <em>Coverage</em>, <em>Softness</em> and <em>Exponent</em> only.
%tableItem :: 50 :: Image :: the shading will be remapped using its value as the U of an image.
%tableItem :: 50 :: Gradient :: the shading will be remapped using its value as the input value of a <em>Gradient</em> node.
%tableEnd
%note :: You must use the <em>Gradient</em> node from the <em>Mixers - Processing</em> group and use as input the <em>Obq_MessageFlt</em> node using the <em>Obq_Toon</em> preset. The port is only accessible via the render tree.

%param :: Use Auto Remap <em>[_autoRemap]</em>
%pp :: This will calculate the proper left-right remap based on resolution. Basically, it puts the left border at -2/width and right at 1+2/width to ensure there will be no artefacts.
%note :: When creating image gradients, add 2 pixels to the left of the image with the same value as the previously first pixel and do the same to the right with the last pixel.


%param :: Remap Left Value <em>[_imageRemapLeft]</em>
%pp :: This is the U value for the left border of the image.
%note :: Remap is done after <em>Bias</em> and <em>Gain</em>.
%warning :: Using 0 for left and 1 for right will cause artefacts.

%param :: Remap Right Value <em>[_imageRemapRight]</em>
%pp :: This is the U value for the left border of the image.

%param :: Remap Bias <em>[_imageRemapBias]</em>
%pp :: This bias will be applied to the U value before accessing the image.

%param :: Remap Gain <em>[_imageRemapGain]</em>
%pp :: This gain will be applied to the U value before accessing the image.

%section :: AOVs

%pp :: You can also render all components in seperate AOVs.
%note :: If a recently created AOV doesn't show in the list, close the shader UI and reopen it.

%param :: Create/Set default AOVs with prefix
%pp :: Pressing this button will set the AOVs' names, or create them if they do not exist, using the prefix and the default names rule.

%param :: Contour AOV
%pp :: This can help you do contours in compositing by edge detecting its channels.
%tableStart
%tableItem :: 80 :: Red :: Depth.
%tableItem :: 80 :: Green :: Polygon ID.
%tableItem :: 80 :: Blue :: Object ID.
%tableItem :: 80 :: Alpha :: Incidence.
%tableEnd
%note :: Object IDs start at 1 in order to have the background equal 0.

%param :: Set Alpha to Over Alpha <em>[putAlphaInFb]</em>
%pp :: When checked, an RGBA AOV will have an alpha equal to the alpha used for compositing in over mode.

%param :: Normalize Object ID in Contour <em>[normalizeObjectID]</em>
%pp :: When checked, the object IDs used for the blue channel in the contour AOV will be normalized.
